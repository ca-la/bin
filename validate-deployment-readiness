#!/bin/bash

# Ensure that the latest deployed database migration is the same as the latest
# local migration. Prevents deploying code before the corresponding migration.
#
# Relies on a couple of potentially-fragile things:
#
# - The sha256 hash of the latest migration filename is exposed via GET /
#   requests to the API, with the key "lastMigrationHash"
# - The `migrations` directory contains all migrations, alphabetically by date,
#   with the exception of the `_template` file.
#
# Note: This incarnation of the script was built for cala-api specifically. If
# we want to reuse this elsewhere, it'll need some modification.

set -euo pipefail

c_green=$'\033[0;32m'
c_red=$'\033[0;31m'
c_yellow=$'\033[1;33m'
c_reset=$'\033[0m'

main() {
  deployment_target=${1:-other}
  migrations=${2:-migrations}

  case "$deployment_target" in
    'staging')
      status_url='https://api-stg.ca.la'
      ;;
    'production')
      status_url='https://api.ca.la'
      ;;
    *)
      echo 'Usage: validate-deployment-readiness [staging|production] [path_to_migrations]'
      exit 1
      ;;
  esac

  deployed_hash=$(
    curl -sA 'validate-deployment-readiness script' $status_url |\
      egrep -o '"lastMigrationHash":"[^"]*"' |\
      cut -d '"' -f 4
  )

  echo $c_yellow'Deployed hash: '$c_reset$deployed_hash

  latest_local_migration=$(
    ls -Ar $migrations |\
      grep -v _template |\
      head -n 1 |\
      tr -d '\n'
  )

  local_hash=$(echo -n $latest_local_migration | shasum -a 256 | cut -d ' ' -f 1)
  echo $c_yellow'Local hash: '$c_reset$local_hash

  if [[ $deployed_hash != $local_hash ]] ; then
    echo $c_red'Hash mismatch! Make sure to run migrations _before_ deploying. Aborting.'$c_reset
    exit 1
  fi

  echo $c_green'Migration hashes match. Ready to roll.'$c_reset
}

main "$@"
